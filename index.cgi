#!/usr/bin/env python
# -*- coding: utf-8 -*-

import glob, random, re, cgi, html, csv, os
from sentence_generator import *            # https://github.com/patrick-brian-mooney/markov-sentence-generator

def get_speech_info(quoteloc):
    desc = 'in a speech'    # Set some defaults in case something goes wrong
    location =''
    with open('speeches/sources.csv') as f:
        header = f.readline()               # Yeah, ignore that line.
        reader=csv.reader(f)
        the_table = [].copy()
        for row in reader:
            if os.path.basename(quoteloc) == row[0]:
                desc = row[1]
                location = row[2]
                break
    return desc, location 

debugging = False

print("""Content-Type: text/html; charset=utf-8

<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<link rel="stylesheet" type="text/css" href="http://patrickbrianmooney.nfshost.com/~patrick/css/skeleton-normalize.css" />
<link rel="stylesheet" type="text/css" href="http://patrickbrianmooney.nfshost.com/~patrick/css/skeleton.css" />
<link rel="stylesheet" type="text/css" href="http://patrickbrianmooney.nfshost.com/~patrick/css/content-skel.css" />
<link rel="stylesheet" type="text/css" href="http://patrickbrianmooney.nfshost.com/~patrick/css/pullquotes.css" />
<link rel="pgpkey" type="application/pgp-keys" href="/~patrick/505AB18E-public.asc" />
<link rel="author" href="http://plus.google.com/109251121115002208129?rel=author" />
<link rel="sitemap" href="/sitemap.xml" />
<link rel="home" href="/~patrick/" title="Home page" />
<link rel="meta" type="application/rdf+xml" title="FOAF" href="/~patrick/foaf.rdf" />
<meta name="foaf:maker" content="foaf:mbox_sha1sum '48a3091d919c5e75a5b21d2f18164eb4d38ef2cd'" />
<link rel="profile" href="http://microformats.org/profile/hcalendar" />
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="icon" type="image/x-icon" href="/~patrick/icons/favicon.ico" />
<title>Sarah Palin Quote, or Random Algorithmic Gibberish?</title>
<meta name="generator" content="Bluefish 2.2.5" />
<meta name="author" content="Patrick Mooney" />
<meta name="dcterms.rights" content="Copyright © 2016 Patrick Mooney" />
<meta name="description" content="Can Sarah Palin pass a crowdsourced Turing test?" />
<meta name="rating" content="general" />
<meta name="revisit-after" content="3 days" />
<meta name="date" content="2016-01-28T04:17:32-0800" />
<meta property="fb:admins" content="100006098197123" />
<meta property="og:title" content="Sarah Palin Quote, or Random Algorithmic Gibberish?" />
<meta property="og:type" content="website" />
<meta property="og:url" content="http://patrickbrianmooney.nfshost.com/~patrick/projects/sarah-palin/" />
<meta property="og:image" content="http://patrickbrianmooney.nfshost.com/~patrick/icons/gear-large.png" />
<meta property="og:description" content="Can Sarah Palin pass a crowdsourced Turing test?" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@patrick_mooney" />
<meta name="twitter:creator" content="@patrick_mooney" />
<meta name="twitter:title" content="Sarah Palin Quote, or Random Algorithmic Gibberish?" />
<meta name="twitter:description" content="Can Sarah Palin pass a crowdsourced Turing test?" />
<meta name="twitter:image:src" content="http://patrickbrianmooney.nfshost.com/~patrick/icons/gear-large.png" />
</head>

<body><div class="container">
<h1>Sarah Palin Quote, or Random Algorithmic Gibberish?</h1>""")

# Parse any CGI parameters passed by a previous invocation, write appropriate results
form = cgi.FieldStorage()

if 'quote' in form:     # Then we're evaluating a previous quiz, and should provide feedback.
    print("""<div class="u-pull-right two-thirds column"><p class="quote-bubble">%s</p></div>""" % form['quote'].value)
    if form['quoteloc'].value == 'None' and form['who'].value == 'algorithm':
        print("""<h2>That's right.</h2>\n\n<p>This is gibberish, but it's not (exactly) the kind of gibberish that Sarah Palin spouts off when she makes speeches. Good eye!</p>""")
    elif form['quoteloc'].value != 'None' and form['who'].value == 'sarah':
        desc, location = get_speech_info(form['quoteloc'].value)
        print("""<h2>That's right.</h2>\n\n<p>Sarah Palin actually said this %s. You can read the text of this speech <a rel="nofollow" href="%s">here</a>.""" % (desc, location))
    elif form['quoteloc'].value != 'None' and form['who'].value == 'algorithm':
        desc, location = get_speech_info(form['quoteloc'].value)
        print("""<h2>Sorry.</h2>\n\n<p>You might think that this disassociative text was generated by a computer trying to sound like a person, but Sarah Palin actually said this %s. You can read the text of this speech <a rel="nofollow" href="%s">here</a>.""" % (desc, location))
    elif form['quoteloc'].value == 'None' and form['who'].value == 'sarah':
        print("""<h2>Sorry.</h2>\n\n<p>That might sound like the kind of crazy, disassociative shit that Sarah Palin would say, but in fact it was generated by a computer algorithm.""")
    else: print("<h2>Something went wrong</h2>")
    print("""<h2 style="clear:both;">Let's try another one</h2>""")


if debugging:
    try:
        the_html = "<h3>debugging</h3><p>the submitted form was:</p>" + "<dl><dt>who:</dt><dd>%s</dd><dt>quoteloc</dt><dd>%s</dd><dt>quote</dt><dd>%s</dd></dl>" % (form['who'].value, form['quoteloc'].value, form['quote'].value)
        print(the_html)
        print(" 'quoteloc' in form?  %s" % ('quoteloc' in form))
    except KeyError:
        pass

print("""<p>There's a 50% chance that Sarah Palin said the quote below, and a 50% chance it was generated by <a rel="me" href="https://github.com/patrick-brian-mooney/markov-sentence-generator">my Markov chain–based random text generator</a>. Can you tell which it is?</p>""")

num_sentences = random.randint(3,6)

if random.random() >= 0.5:      # Generate some new Sarah Palin–style gibberish
    the_list = []
    for which_file in glob.glob('speeches/*txt'):
        the_list = the_list + word_list(which_file)
    starts, the_mapping = buildMapping(the_list, markov_length=2)
    the_quote = gen_text(the_mapping, starts, markov_length=2, sentences_desired=5, paragraph_break_probability=0)
    quote_loc = 'None'
else:                           # Quote some gibberish that Sarah Palin herself generated.
    quote_loc = random.choice(glob.glob('speeches/*txt')) 
    with open(quote_loc) as the_file:
        the_lines = the_file.readlines()
        all_sentences = re.split('(?<=[.!?]) +', ' '.join(the_lines))
        first_sentence = random.choice(range(len(all_sentences) - num_sentences))
        the_quote = ' '.join(all_sentences[first_sentence : first_sentence + num_sentences])
print('<p class="speech-bubble">%s</p>' % the_quote)

print("""<form method="POST" action="index.cgi">
<h2>Who said it?</h2>""")

# Randomly mix up radio button order and which is selected by default to avoid introducing bias.
which_order = random.randint(1,4)
if which_order == 0: print('<input type="radio" name="who" checked="checked" value="sarah"> Sarah Palin<br />\n<input type="radio" name="who" value="algorithm"> An algorithm<br />\n')
elif which_order == 1: print('<input type="radio" name="who" value="sarah"> Sarah Palin<br />\n<input type="radio" name="who" checked="checked" value="algorithm"> An algorithm<br />\n')
elif which_order == 2: print('<input type="radio" name="who" value="algorithm"> An algorithm<br />\n<input type="radio" name="who" checked="checked" value="sarah"> Sarah Palin<br />\n')
else: print('<input type="radio" name="who" checked="checked" value="algorithm"> An algorithm<br />\n<input type="radio" name="who" value="sarah"> Sarah Palin<br />\n')

print("""<input type="hidden" name="quote" value="%s">
<input type="hidden" name="quoteloc" value="%s">
<input type="submit" value="I know!" class="button-primary">
</form>""" % (html.escape(the_quote), html.escape(quote_loc)))
print("""<footer>
<p>More information about this quiz is <a href="technical.html">here</a>. The code generating the quiz and the speech texts that the quiz is based on are available <a rel="me" href="https://github.com/patrick-brian-mooney/sarah-palin-quotes">here</a>. If you know of a reliable transcript of a Sarah Palin speech that this site should use, please <a rel="me" href="/~patrick/contact.html">get in touch with me</a>.</p>
<p class="status vevent vcard"><a rel="me author" class="url location" href="#">This web page</a> is copyright © 2016 by <span class="fn">Patrick Mooney</span>. <abbr class="summary description" title="Description of Patrick Mooney's technical projects last updated">Last update to this HTML file</abbr>: <abbr class="dtstart" title="2016-01-27">27 January 2016</abbr>.</p>
</footer>
</div></body>
</html>""")
